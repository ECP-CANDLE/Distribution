BootStrap: docker
From: nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04
#From: nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

%setup
    # commands to be executed on host outside container during bootstrap

    pip_depend="$PWD/pip-dependencies.txt"
    if [ ! -f "$pip_depend" ]
    then
        echo "Cannot find $pip_depend." >&2
        exit 1
    fi

    r_depend="$PWD/R-dependencies.R"
    if [ ! -f "$r_depend" ]
    then
        echo "Cannot find $r_depend." >&2
        exit 1
    fi

    cp $PWD/pip-dependencies.txt $SINGULARITY_ROOTFS/opt/pip-dependencies.txt
    cp $PWD/R-dependencies.R $SINGULARITY_ROOTFS/opt/R-dependencies.R

%post
    # commands to be executed inside container during bootstrap
    # add universe repo and install some packages
    sed -i '/xenial.*universe/s/^#//g' /etc/apt/sources.list
    export LANG=C
    apt-get -y update
    apt-get -y install vim wget perl python python-pip python-dev apt-transport-https
    cd /opt

    if [ ! -f pip-dependencies.txt ] 
    then
        echo "Cannot locate the /opt/pip-dependencies.txt file"
        exit 1
    fi

    if [ ! -f R-dependencies.R ] 
    then
        echo "Cannot locate the /opt/R-dependencies.R file"
        exit 1
    fi

    #These dependencies are required for in install the mlrMBO R Pacakge

    apt-get -y install lsb-release software-properties-common
    add-apt-repository "deb http://cran.rstudio.com/bin/linux/ubuntu $(lsb_release -sc)/"
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
    apt-get update
    apt-get -y install r-base libssl-dev libcurl4-openssl-dev libxml2-dev




    #Install the mlfMBO R packages
    R -f /opt/R-dependencies.R

    # install all the pip dependencies
    #TODO: Restore upgrade pip, there is a bug with the last version 10.x
    #pip install --upgrade pip
    pip install --upgrade pip==9.0.3

	  # install all the pip dependencies
    pip install -r /opt/pip-dependencies.txt

    pip install tensorflow-gpu==1.8.0
    pip install keras==2.1.6

    # build openmpi
    BUILD_DIR=/tmp
    cd $BUILD_DIR
    VER=openmpi-3.0.0
    wget https://download.open-mpi.org/release/open-mpi/v3.0/$VER.tar.gz
    tar xvf $VER.tar.gz
    cd $VER
    ./configure --disable-dlopen
    make install
    echo /usr/local/lib >> /etc/ld.so.conf
    ldconfig
    cd $BUILD_DIR
    rm $VER.tar.gz
    rm -rf $VER

	  # install and build swift
    # add /usr/bin to path
    export PATH=/usr/bin:$PATH
    cd $BUILD_DIR
    rm -rf swift-t 
    
    #Install swift dependencies
    apt-get -y install autoconf default-jdk git ant swig zsh tcl tcl-dev
    git clone https://github.com/swift-lang/swift-t.git
    ./swift-t/dev/build/init-settings.sh
    sed -i  's@^export SWIFT_T_PREFIX=.*@export SWIFT_T_PREFIX=/opt/swift-t@' ./swift-t/dev/build/swift-t-settings.sh
    sed -i  's@.*ENABLE_PYTHON=1@ENABLE_PYTHON=1@' ./swift-t/dev/build/swift-t-settings.sh
    sed -i  's@.*ENABLE_R=1@ENABLE_R=1@' ./swift-t/dev/build/swift-t-settings.sh
    sed -i  's@.*R_INSTALL=.*@R_INSTALL=/usr/share/R/@' ./swift-t/dev/build/swift-t-settings.sh
    ./swift-t/dev/build/build-swift-t.sh

    #Make the turbine executable
    TURBINE_PATH=/opt/swift-t/turbine/bin/turbine
    chmod +x $TURBINE_PATH
    #Remove the mpiexec call from turbine as mpiexec will be called from outside the container using the scheduler
    sed -i  "s@\${TURBINE_LAUNCHER} \${OPTIONS} \${=VALGRIND} @@" $TURBINE_PATH


    #Add the bin directories to PATH
    echo "" >> /.singularity.d/env/90-swift.sh
    echo "export PATH=/opt/swift-t/stc/bin/:/opt/swift-t/turbine/bin:"'$PATH' >> /.singularity.d/env/90-swift.sh 

    cd $BUILD_DIR

    # create bind points for NIH HPC environment
    mkdir /gpfs /spin1 /gs2 /gs3 /gs4 /gs5 /gs6 /gs7 /gs8 /gs9 /gs10 /gs11 /data /scratch /fdb /lscratch

%runscript
    # commands to be executed when the container runs
    bash -norc


%test
    # commands to be executed within container at close of bootstrap process
